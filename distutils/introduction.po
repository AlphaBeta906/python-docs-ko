# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-15 07:19+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../Doc/distutils/introduction.rst:5
msgid "An Introduction to Distutils"
msgstr "Distutils 소개"

#: ../Doc/distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at "
"https://setuptools.readthedocs.io/en/latest/setuptools.html independently"
" covers all of the relevant information currently included here."
msgstr ""
"이 문서는 https://setuptools.readthedocs.io/en/latest/setuptools.html 의 "
"``setuptools`` 설명서가 현재 여기에 포함된 모든 관련 정보를 독립적으로 다루기 전까지만 보존됩니다."

#: ../Doc/distutils/introduction.rst:9
msgid ""
"This document covers using the Distutils to distribute your Python "
"modules, concentrating on the role of developer/distributor: if you're "
"looking for information on installing Python modules, you should refer to"
" the :ref:`install-index` chapter."
msgstr ""
"이 문서는 개발자/배포자의 역할에 집중하면서, Distutils를 사용하여 파이썬 모듈을 배포하는 방법을 다룹니다: 파이썬 모듈 "
"설치에 대한 정보를 찾으려면 :ref:`install-index` 장을 참조하십시오."

#: ../Doc/distutils/introduction.rst:18
msgid "Concepts & Terminology"
msgstr "개념과 용어"

#: ../Doc/distutils/introduction.rst:20
msgid ""
"Using the Distutils is quite simple, both for module developers and for "
"users/administrators installing third-party modules.  As a developer, "
"your responsibilities (apart from writing solid, well-documented and "
"well-tested code, of course!) are:"
msgstr ""
"Distutils를 사용하는 것은 모듈 개발자와 제삼자 모듈을 설치하는 사용자/관리자 모두에게 매우 간단합니다. 개발자로서, 당신의"
" 책임은 (물론, 견고하고, 잘 설명되고 잘 테스트 된 코드 작성과는 별도로) 다음과 같습니다:"

#: ../Doc/distutils/introduction.rst:25
msgid "write a setup script (:file:`setup.py` by convention)"
msgstr "설정 스크립트 작성 (일반적으로 :file:`setup.py`)"

#: ../Doc/distutils/introduction.rst:27
msgid "(optional) write a setup configuration file"
msgstr "(선택 사항) 설정 구성 파일 작성"

#: ../Doc/distutils/introduction.rst:29
msgid "create a source distribution"
msgstr "소스 배포판 만들기"

#: ../Doc/distutils/introduction.rst:31
msgid "(optional) create one or more built (binary) distributions"
msgstr "(선택 사항) 하나 이상의 빌드된 (바이너리) 배포판 만들기"

#: ../Doc/distutils/introduction.rst:33
msgid "Each of these tasks is covered in this document."
msgstr "이러한 각 작업은 이 문서에서 다룹니다."

#: ../Doc/distutils/introduction.rst:35
msgid ""
"Not all module developers have access to a multitude of platforms, so "
"it's not always feasible to expect them to create a multitude of built "
"distributions.  It is hoped that a class of intermediaries, called "
"*packagers*, will arise to address this need.  Packagers will take source"
" distributions released by module developers, build them on one or more "
"platforms, and release the resulting built distributions.  Thus, users on"
" the most popular platforms will be able to install most popular Python "
"module distributions in the most natural way for their platform, without "
"having to run a single setup script or compile a line of code."
msgstr ""
"모든 모듈 개발자가 다수의 플랫폼에 액세스 할 수 있는 것은 아니므로, 다수의 빌드된 배포판을 만들 것으로 기대할 수 있는 것은 "
"아닙니다. 이러한 요구를 해결하기 위해 *패키저(packagers)*\\라는 중개자 클래스가 생길 것으로 기대됩니다. 패키저는 모듈"
" 개발자가 배포한 소스 배포판을 가져와서, 하나 이상의 플랫폼에서 빌드한 후, 만들어진 빌드된 배포본을 배포합니다. 따라서, "
"대부분의 인기 있는 플랫폼의 사용자는 설정 스크립트를 실행하지도 코드를 컴파일하지도 않으면서 대부분의 인기 있는 파이썬 모듈 "
"배포판을 가장 자연스러운 방식으로 플랫폼에 설치할 수 있게 될 것입니다."

#: ../Doc/distutils/introduction.rst:49
msgid "A Simple Example"
msgstr "간단한 예"

#: ../Doc/distutils/introduction.rst:51
msgid ""
"The setup script is usually quite simple, although since it's written in "
"Python, there are no arbitrary limits to what you can do with it, though "
"you should be careful about putting arbitrarily expensive operations in "
"your setup script. Unlike, say, Autoconf-style configure scripts, the "
"setup script may be run multiple times in the course of building and "
"installing your module distribution."
msgstr ""
"설정 스크립트는 일반적으로 매우 간단합니다만, 파이썬으로 작성되기 때문에, 할 수 있는 작업에 대한 임의의 제한이 없고, 설정 "
"스크립트에 임의의 비싼 연산을 수행하지 않도록 주의해야 합니다. 예를 들어, Autoconf 스타일 구성 스크립트와 달리, 설정 "
"스크립트는 모듈 배포를 빌드하고 설치하는 과정에서 여러 번 실행될 수 있습니다."

#: ../Doc/distutils/introduction.rst:58
msgid ""
"If all you want to do is distribute a module called :mod:`foo`, contained"
" in a file :file:`foo.py`, then your setup script can be as simple as "
"this::"
msgstr ""
"파일 :file:`foo.py`\\에 포함된, :mod:`foo`\\라는 모듈을 배포하는 것이 원하는 전부라면, 설정 스크립트는 "
"다음과 같이 간단할 수 있습니다::"

#: ../Doc/distutils/introduction.rst:67
msgid "Some observations:"
msgstr "몇 가지 관찰 사항:"

#: ../Doc/distutils/introduction.rst:69
msgid ""
"most information that you supply to the Distutils is supplied as keyword "
"arguments to the :func:`setup` function"
msgstr "Distutils에 제공하는 대부분의 정보는 :func:`setup` 함수에 키워드 인자로 제공됩니다."

#: ../Doc/distutils/introduction.rst:72
msgid ""
"those keyword arguments fall into two categories: package metadata (name,"
" version number) and information about what's in the package (a list of "
"pure Python modules, in this case)"
msgstr ""
"이러한 키워드 인자는 두 가지 범주로 분류됩니다: 패키지 메타데이터(이름, 버전 번호)와 패키지에 무엇이 포함되는지에 관한 정보 "
"(이 경우, 순수 파이썬 모듈의 리스트)"

#: ../Doc/distutils/introduction.rst:76
msgid ""
"modules are specified by module name, not filename (the same will hold "
"true for packages and extensions)"
msgstr "모듈은 파일 이름이 아닌 모듈 이름으로 지정됩니다 (패키지와 확장에도 동일하게 적용됩니다)"

#: ../Doc/distutils/introduction.rst:79
msgid ""
"it's recommended that you supply a little more metadata, in particular "
"your name, email address and a URL for the project (see section :ref"
":`setup-script` for an example)"
msgstr ""
"메타데이터를 조금 더 제공하는 것이 좋습니다, 특히 여러분의 이름, 이메일 주소 및 프로젝트의 URL  (예는 섹션 :ref"
":`setup-script`\\를 참조하십시오)"

#: ../Doc/distutils/introduction.rst:83
msgid ""
"To create a source distribution for this module, you would create a setup"
" script, :file:`setup.py`, containing the above code, and run this "
"command from a terminal::"
msgstr ""
"이 모듈의 소스 배포를 만들려면, 위 코드를 포함하는 설정 스크립트 :file:`setup.py`\\를 만들고, 터미널에서 이 "
"명령을 실행하십시오::"

#: ../Doc/distutils/introduction.rst:89
msgid ""
"For Windows, open a command prompt window (:menuselection:`Start --> "
"Accessories`) and change the command to::"
msgstr ""
"윈도우의 경우, 명령 프롬프트 창(:menuselection:`Start --> Accessories`)을 열고 명령을 다음과 같이"
" 바꾸십시오::"

#: ../Doc/distutils/introduction.rst:94
msgid ""
":command:`sdist` will create an archive file (e.g., tarball on Unix, ZIP "
"file on Windows) containing your setup script :file:`setup.py`, and your "
"module :file:`foo.py`. The archive file will be named "
":file:`foo-1.0.tar.gz` (or :file:`.zip`), and will unpack into a "
"directory :file:`foo-1.0`."
msgstr ""
":command:`sdist`\\는 설정 스크립트 :file:`setup.py`\\와 모듈 :file:`foo.py`\\를 포함하는"
" 아카이브 파일(예를 들어 유닉스의 타르볼(tarball), 윈도우의 ZIP 파일)을 만듭니다. 아카이브 파일의 이름은 "
":file:`foo-1.0.tar.gz`\\(또는 :file:`.zip`)가 되고, 디렉터리 :file:`foo-1.0`\\에 "
"압축이 풀립니다."

#: ../Doc/distutils/introduction.rst:99
msgid ""
"If an end-user wishes to install your :mod:`foo` module, all they have to"
" do is download :file:`foo-1.0.tar.gz` (or :file:`.zip`), unpack it, and"
"---from the :file:`foo-1.0` directory---run ::"
msgstr ""
"최종 사용자가 :mod:`foo` 모듈을 설치하려면, :file:`foo-1.0.tar.gz`\\(또는 :file:`.zip`)를 "
"다운로드하여, 압축을 풀고, --- :file:`foo-1.0` 디렉터리에서 --- 다음을 실행하기만 하면 됩니다::"

#: ../Doc/distutils/introduction.rst:105
msgid ""
"which will ultimately copy :file:`foo.py` to the appropriate directory "
"for third-party modules in their Python installation."
msgstr "그러면 :file:`foo.py`\\를 파이썬 설치에서 제삼자 모듈을 위한 적절한 디렉터리에 복사합니다."

#: ../Doc/distutils/introduction.rst:108
msgid ""
"This simple example demonstrates some fundamental concepts of the "
"Distutils. First, both developers and installers have the same basic user"
" interface, i.e. the setup script.  The difference is which Distutils "
"*commands* they use: the :command:`sdist` command is almost exclusively "
"for module developers, while :command:`install` is more often for "
"installers (although most developers will want to install their own code "
"occasionally)."
msgstr ""
"이 간단한 예는 Distutils의 몇 가지 기본 개념을 보여줍니다. 먼저, 개발자와 설치자 모두 같은 기본 사용자 인터페이스(즉 "
"설정 스크립트)를 갖습니다. 차이점은 사용하는 Distutils *명령(commands)*\\입니다: :command:`sdist`"
" 명령은 거의 모듈 개발자 전용이지만, :command:`install`\\은 설치자를 위한 경우가 많습니다 (대부분의 개발자는 "
"때때로 자신의 코드를 설치하려고 하지만)."

#: ../Doc/distutils/introduction.rst:115
msgid ""
"If you want to make things really easy for your users, you can create one"
" or more built distributions for them.  For instance, if you are running "
"on a Windows machine, and want to make things easy for other Windows "
"users, you can create an executable installer (the most appropriate type "
"of built distribution for this platform) with the "
":command:`bdist_wininst` command.  For example::"
msgstr ""
"사용자가 정말 쉽게 작업하도록 하려면, 하나 이상의 빌드된 배포를 만들 수 있습니다. 예를 들어, 윈도우 기계에서 실행 중이고, "
"다른 윈도우 사용자의 작업을 쉽게 만들려면 :command:`bdist_wininst` 명령을 사용하여 실행 가능 설치 프로그램(이"
" 플랫폼에서 가장 적합한 빌드 유형)을 만들 수 있습니다. 예를 들면::"

#: ../Doc/distutils/introduction.rst:123
msgid ""
"will create an executable installer, :file:`foo-1.0.win32.exe`, in the "
"current directory."
msgstr "은 현재 디렉터리에 실행 가능한 설치 프로그램 :file:`foo-1.0.win32.exe`\\를 만듭니다."

#: ../Doc/distutils/introduction.rst:126
msgid ""
"Other useful built distribution formats are RPM, implemented by the "
":command:`bdist_rpm` command, Solaris :program:`pkgtool` "
"(:command:`bdist_pkgtool`), and HP-UX :program:`swinstall` "
"(:command:`bdist_sdux`).  For example, the following command will create "
"an RPM file called :file:`foo-1.0.noarch.rpm`::"
msgstr ""
"다른 유용한 빌드된 배포 형식은 :command:`bdist_rpm` 명령으로 구현된 RPM, Solaris "
":program:`pkgtool` (:command:`bdist_pkgtool`) 및 HP-UX "
":program:`swinstall` (:command:`bdist_sdux`) 입니다. 예를 들어, 다음 명령은 "
":file:`foo-1.0.noarch.rpm`\\이라는 RPM 파일을 만듭니다::"

#: ../Doc/distutils/introduction.rst:134
msgid ""
"(The :command:`bdist_rpm` command uses the :command:`rpm` executable, "
"therefore this has to be run on an RPM-based system such as Red Hat "
"Linux, SuSE Linux, or Mandrake Linux.)"
msgstr ""
"(:command:`bdist_rpm` 명령은 :command:`rpm` 실행 파일을 사용해서, 레드햇 리눅스(Red Hat "
"Linux), SuSE 리눅스 또는 Mandrake 리눅스와 같은 RPM 기반 시스템에서 실행해야 합니다.)"

#: ../Doc/distutils/introduction.rst:138
msgid ""
"You can find out what distribution formats are available at any time by "
"running ::"
msgstr "다음을 실행하여 언제든지 사용 가능한 배포 형식을 찾을 수 있습니다::"

#: ../Doc/distutils/introduction.rst:147
msgid "General Python terminology"
msgstr "일반적인 파이썬 용어"

#: ../Doc/distutils/introduction.rst:149
msgid ""
"If you're reading this document, you probably have a good idea of what "
"modules, extensions, and so forth are.  Nevertheless, just to be sure "
"that everyone is operating from a common starting point, we offer the "
"following glossary of common Python terms:"
msgstr ""
"이 문서를 읽고 있다면, 아마도 모듈, 확장 등이 무엇인지 잘 알고 있을 것입니다. 그런데도, 모든 사람이 공통된 출발점에서 "
"시작하도록 하기 위해, 다음과 같은 일반적인 파이썬 용어에 대한 용어집을 제공합니다:"

#: ../Doc/distutils/introduction.rst:157
msgid "module"
msgstr "모듈"

#: ../Doc/distutils/introduction.rst:155
msgid ""
"the basic unit of code reusability in Python: a block of code imported by"
" some other code.  Three types of modules concern us here: pure Python "
"modules, extension modules, and packages."
msgstr ""
"파이썬에서 코드 재사용의 기본 단위: 다른 코드가 임포트 한 코드 블록. 세 가지 유형의 모듈을 여기에서 다룹니다: 순수 파이썬 "
"모듈, 확장 모듈 및 패키지."

#: ../Doc/distutils/introduction.rst:162
msgid "pure Python module"
msgstr "순수 파이썬 모듈"

#: ../Doc/distutils/introduction.rst:160
msgid ""
"a module written in Python and contained in a single :file:`.py` file "
"(and possibly associated :file:`.pyc` files).  Sometimes referred to as a"
" \"pure module.\""
msgstr ""
"파이썬으로 작성되고 단일 :file:`.py` 파일 (그리고 아마도 관련된 :file:`.pyc` 파일)에 포함된 모듈. \"순수 "
"모듈\" 이라고도 합니다."

#: ../Doc/distutils/introduction.rst:170
msgid "extension module"
msgstr "확장 모듈"

#: ../Doc/distutils/introduction.rst:165
msgid ""
"a module written in the low-level language of the Python implementation: "
"C/C++ for Python, Java for Jython. Typically contained in a single "
"dynamically loadable pre-compiled file, e.g. a shared object "
"(:file:`.so`) file for Python extensions on Unix, a DLL (given the "
":file:`.pyd` extension) for Python extensions on Windows, or a Java class"
" file for Jython extensions.  (Note that currently, the Distutils only "
"handles C/C++ extensions for Python.)"
msgstr ""
"파이썬 구현의 저수준 언어로 작성된 모듈: 파이썬에서는 C/C++, Jython에서는 Java. 일반적으로 동적으로 로드할 수 있는"
" 단일 사전 컴파일된 파일에 포함됩니다, 예를 들어 유닉스의 파이썬 확장을 위한 공유 객체 (:file:`.so`) 파일, 윈도우의"
" 파이썬 확장을 위한 DLL (:file:`.pyd` 확장자) 또는 Jython 확장을 위한 Java 클래스 파일. (현재 "
"Distutils는 파이썬의 C/C++ 확장만 처리합니다.)"

#: ../Doc/distutils/introduction.rst:175
msgid "package"
msgstr "패키지"

#: ../Doc/distutils/introduction.rst:173
msgid ""
"a module that contains other modules; typically contained in a directory "
"in the filesystem and distinguished from other directories by the "
"presence of a file :file:`__init__.py`."
msgstr ""
"다른 모듈을 포함하는 모듈; 일반적으로 파일 시스템의 디렉터리에 포함되며 파일 :file:`__init__.py`\\의 존재로 다른"
" 디렉터리와 구별됩니다."

#: ../Doc/distutils/introduction.rst:185
msgid "root package"
msgstr "루트 패키지"

#: ../Doc/distutils/introduction.rst:178
msgid ""
"the root of the hierarchy of packages.  (This isn't really a package, "
"since it doesn't have an :file:`__init__.py` file.  But we have to call "
"it something.) The vast majority of the standard library is in the root "
"package, as are many small, standalone third-party modules that don't "
"belong to a larger module collection. Unlike regular packages, modules in"
" the root package can be found in many directories: in fact, every "
"directory listed in ``sys.path`` contributes modules to the root package."
msgstr ""
"패키지 계층의 루트 (이것은 :file:`__init__.py` 파일을 가지고 있지 않기 때문에, 진짜 패키지는 아닙니다. 그러나 "
"우리는 이것에 뭔가 이름을 붙여야 합니다.) 표준 라이브러리의 대부분은 루트 패키지에 있으며, 더 큰 모듈 컬렉션에 속하지 않는 "
"많은 소규모 독립형 제삼자 모듈도 마찬가지입니다. 일반 패키지와 달리, 루트 패키지에 있는 모듈은 여러 디렉터리에서 찾을 수 "
"있습니다: 실제로 ``sys.path``\\에 나열된 모든 디렉터리는 모듈을 루트 패키지에 제공합니다."

#: ../Doc/distutils/introduction.rst:190
msgid "Distutils-specific terminology"
msgstr "Distutils 관련 용어"

#: ../Doc/distutils/introduction.rst:192
msgid ""
"The following terms apply more specifically to the domain of distributing"
" Python modules using the Distutils:"
msgstr "다음 용어는 Distutils를 사용하여 파이썬 모듈을 배포하는 도메인에 더 구체적으로 적용됩니다:"

#: ../Doc/distutils/introduction.rst:201
msgid "module distribution"
msgstr "모듈 배포"

#: ../Doc/distutils/introduction.rst:196
msgid ""
"a collection of Python modules distributed together as a single "
"downloadable resource and meant to be installed *en masse*.  Examples of "
"some well-known module distributions are NumPy, SciPy, Pillow, or mxBase."
"  (This would be called a *package*, except that term is already taken in"
" the Python context: a single module distribution may contain zero, one, "
"or many Python packages.)"
msgstr ""
"다운로드 가능한 단일 리소스로 함께 배포되고 *함께* 설치하는 파이썬 모듈 모음입니다. 잘 알려진 몇 가지 모듈 배포의 예는 "
"NumPy, SciPy, Pillow 또는 mxBase입니다. (이것은 이 용어가 파이썬 문맥에서 이미 사용된 것을 제외하고는 "
"*패키지*\\라고 부릅니다: 단일 모듈 배포에는 0, 1 또는 여러 파이썬 패키지가 포함될 수 있습니다.)"

#: ../Doc/distutils/introduction.rst:205
msgid "pure module distribution"
msgstr "순수한 모듈 배포"

#: ../Doc/distutils/introduction.rst:204
msgid ""
"a module distribution that contains only pure Python modules and "
"packages. Sometimes referred to as a \"pure distribution.\""
msgstr "순수한 파이썬 모듈과 패키지만 포함하는 모듈 배포. 때때로 \"순수 배포\" 라고도 합니다."

#: ../Doc/distutils/introduction.rst:209
msgid "non-pure module distribution"
msgstr "순수하지 않은 모듈 배포"

#: ../Doc/distutils/introduction.rst:208
msgid ""
"a module distribution that contains at least one extension module.  "
"Sometimes referred to as a \"non-pure distribution.\""
msgstr "적어도 하나의 확장 모듈을 포함하는 모듈 배포. 때때로 \"비순수 배포\" 라고도 합니다."

#: ../Doc/distutils/introduction.rst:213
msgid "distribution root"
msgstr "배포 루트"

#: ../Doc/distutils/introduction.rst:212
msgid ""
"the top-level directory of your source tree (or  source distribution); "
"the directory where :file:`setup.py` exists.  Generally  :file:`setup.py`"
" will be run from this directory."
msgstr ""
"소스 트리(또는 소스 배포)의 최상위 디렉터리; :file:`setup.py`\\가 존재하는 디렉터리. 일반적으로 이 디렉터리에서 "
":file:`setup.py`\\가 실행됩니다."

