# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../Doc/library/tracemalloc.rst:2
msgid ":mod:`tracemalloc` --- Trace memory allocations"
msgstr ":mod:`tracemalloc` --- 메모리 할당 추적"

#: ../Doc/library/tracemalloc.rst:9
msgid "**Source code:** :source:`Lib/tracemalloc.py`"
msgstr "**소스 코드:** :source:`Lib/tracemalloc.py`"

#: ../Doc/library/tracemalloc.rst:13
msgid ""
"The tracemalloc module is a debug tool to trace memory blocks allocated "
"by Python. It provides the following information:"
msgstr "tracemalloc 모듈은 파이썬이 할당한 메모리 블록을 추적하는 디버그 도구입니다. 다음 정보를 제공합니다:"

#: ../Doc/library/tracemalloc.rst:16
msgid "Traceback where an object was allocated"
msgstr "객체가 할당된 곳의 트레이스백"

#: ../Doc/library/tracemalloc.rst:17
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr "파일명과 줄 번호별로 할당된 메모리 블록에 대한 통계: 할당된 메모리 블록의 총 크기, 수 및 평균 크기"

#: ../Doc/library/tracemalloc.rst:19
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr "메모리 누수를 탐지하기 위해 두 스냅샷의 차이점 계산"

#: ../Doc/library/tracemalloc.rst:21
msgid ""
"To trace most memory blocks allocated by Python, the module should be "
"started as early as possible by setting the :envvar:`PYTHONTRACEMALLOC` "
"environment variable to ``1``, or by using :option:`-X` ``tracemalloc`` "
"command line option. The :func:`tracemalloc.start` function can be called"
" at runtime to start tracing Python memory allocations."
msgstr ""
"파이썬이 할당한 대부분의 메모리 블록을 추적하려면, :envvar:`PYTHONTRACEMALLOC` 환경 변수를 ``1``\\로 "
"설정하거나, :option:`-X` ``tracemalloc`` 명령 줄 옵션을 사용하여 모듈을 가능한 한 빨리 시작해야 합니다. "
":func:`tracemalloc.start` 함수는 실행 시간에 호출되어 파이썬 메모리 할당 추적을 시작할 수 있습니다."

#: ../Doc/library/tracemalloc.rst:27
msgid ""
"By default, a trace of an allocated memory block only stores the most "
"recent frame (1 frame). To store 25 frames at startup: set the "
":envvar:`PYTHONTRACEMALLOC` environment variable to ``25``, or use the "
":option:`-X` ``tracemalloc=25`` command line option."
msgstr ""
"기본적으로, 할당된 메모리 블록의 트레이스는 가장 최근의 프레임 만 저장합니다 (1프레임). 시작 시 25프레임을 저장하려면: "
":envvar:`PYTHONTRACEMALLOC` 환경 변수를 ``25``\\로 설정하거나, :option:`-X` "
"``tracemalloc=25`` 명령 줄 옵션을 사용하십시오."

#: ../Doc/library/tracemalloc.rst:34
msgid "Examples"
msgstr "예"

#: ../Doc/library/tracemalloc.rst:37
msgid "Display the top 10"
msgstr "상위 10개 표시"

#: ../Doc/library/tracemalloc.rst:39
msgid "Display the 10 files allocating the most memory::"
msgstr "가장 많은 메모리를 할당하는 10개의 파일을 표시합니다::"

#: ../Doc/library/tracemalloc.rst:55 ../Doc/library/tracemalloc.rst:227
msgid "Example of output of the Python test suite::"
msgstr "파이썬 테스트 스위트의 출력 예::"

#: ../Doc/library/tracemalloc.rst:69
msgid ""
"We can see that Python loaded ``4855 KiB`` data (bytecode and constants) "
"from modules and that the :mod:`collections` module allocated ``244 KiB``"
" to build :class:`~collections.namedtuple` types."
msgstr ""
"파이썬이 모듈에서 ``4855 KiB`` 데이터 (바이트 코드와 상수)를 로드했으며 :mod:`collections` 모듈이 "
":class:`~collections.namedtuple` 형을 빌드하기 위해 ``244 KiB``\\를 할당했음을 알 수 "
"있습니다."

#: ../Doc/library/tracemalloc.rst:73 ../Doc/library/tracemalloc.rst:252
msgid "See :meth:`Snapshot.statistics` for more options."
msgstr "추가 옵션은 :meth:`Snapshot.statistics`\\를 참조하십시오."

#: ../Doc/library/tracemalloc.rst:77
msgid "Compute differences"
msgstr "차이 계산"

#: ../Doc/library/tracemalloc.rst:79
msgid "Take two snapshots and display the differences::"
msgstr "두 개의 스냅샷을 취하고 차이점을 표시합니다::"

#: ../Doc/library/tracemalloc.rst:95
msgid ""
"Example of output before/after running some tests of the Python test "
"suite::"
msgstr "파이썬 테스트 스위트의 일부 테스트를 실행하기 전/후의 출력 예::"

#: ../Doc/library/tracemalloc.rst:109
msgid ""
"We can see that Python has loaded ``8173 KiB`` of module data (bytecode "
"and constants), and that this is ``4428 KiB`` more than had been loaded "
"before the tests, when the previous snapshot was taken. Similarly, the "
":mod:`linecache` module has cached ``940 KiB`` of Python source code to "
"format tracebacks, all of it since the previous snapshot."
msgstr ""
"우리는 파이썬이 ``8173 KiB``\\의 모듈 데이터(바이트 코드와 상수)를 로드했으며, 이전 스냅샷을 취할 때인 테스트 전에 "
"로드된 것보다 ``4428 KiB`` 더 많은 것을 볼 수 있습니다. 마찬가지로, :mod:`linecache` 모듈은 트레이스백을"
" 포맷하기 위해 ``940 KiB``\\의 파이썬 소스 코드를 캐시 했는데, 이전 스냅샷 이후의 모든 것입니다."

#: ../Doc/library/tracemalloc.rst:115
msgid ""
"If the system has little free memory, snapshots can be written on disk "
"using the :meth:`Snapshot.dump` method to analyze the snapshot offline. "
"Then use the :meth:`Snapshot.load` method reload the snapshot."
msgstr ""
"시스템에 사용 가능한 메모리가 거의 없으면, 스냅샷을 오프라인으로 분석하기 위해 :meth:`Snapshot.dump` 메서드로 "
"디스크에 스냅샷을 기록할 수 있습니다. 그런 다음 :meth:`Snapshot.load` 메서드를 사용하여 스냅샷을 다시 "
"로드하십시오."

#: ../Doc/library/tracemalloc.rst:121
msgid "Get the traceback of a memory block"
msgstr "메모리 블록의 트레이스백 얻기"

#: ../Doc/library/tracemalloc.rst:123
msgid "Code to display the traceback of the biggest memory block::"
msgstr "가장 큰 메모리 블록의 트레이스백을 표시하는 코드::"

#: ../Doc/library/tracemalloc.rst:141
msgid ""
"Example of output of the Python test suite (traceback limited to 25 "
"frames)::"
msgstr "파이썬 테스트 스위트의 출력 예 (트레이스백은 25프레임으로 제한되었습니다)::"

#: ../Doc/library/tracemalloc.rst:178
msgid ""
"We can see that the most memory was allocated in the :mod:`importlib` "
"module to load data (bytecode and constants) from modules: ``870.1 KiB``."
" The traceback is where the :mod:`importlib` loaded data most recently: "
"on the ``import pdb`` line of the :mod:`doctest` module. The traceback "
"may change if a new module is loaded."
msgstr ""
"대부분의 메모리가 모듈에서 데이터(바이트 코드와 상수)를 로드하기 위해 :mod:`importlib` 모듈에 할당되었음을 알 수 "
"있습니다: ``870.1 KiB``. 트레이스백은 :mod:`importlib`\\가 가장 최근에 데이터를 로드한 위치입니다: "
":mod:`doctest` 모듈의 ``import pdb`` 줄. 새 모듈이 로드되면 트레이스백이 변경될 수 있습니다."

#: ../Doc/library/tracemalloc.rst:186
msgid "Pretty top"
msgstr "예쁜 탑(top)"

#: ../Doc/library/tracemalloc.rst:188
msgid ""
"Code to display the 10 lines allocating the most memory with a pretty "
"output, ignoring ``<frozen importlib._bootstrap>`` and ``<unknown>`` "
"files::"
msgstr ""
"``<frozen importlib._bootstrap>``\\과 ``<unknown>`` 파일을 무시하고, 예쁜 출력으로 가장 "
"많은 메모리를 할당하는 10개의 줄을 표시하는 코드::"

#: ../Doc/library/tracemalloc.rst:256
msgid "API"
msgstr "API"

#: ../Doc/library/tracemalloc.rst:259
msgid "Functions"
msgstr "함수"

#: ../Doc/library/tracemalloc.rst:263
msgid "Clear traces of memory blocks allocated by Python."
msgstr "파이썬이 할당한 메모리 블록의 트레이스를 지웁니다."

#: ../Doc/library/tracemalloc.rst:265
msgid "See also :func:`stop`."
msgstr ":func:`stop`\\도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:270
msgid ""
"Get the traceback where the Python object *obj* was allocated. Return a "
":class:`Traceback` instance, or ``None`` if the :mod:`tracemalloc` module"
" is not tracing memory allocations or did not trace the allocation of the"
" object."
msgstr ""
"파이썬 객체 *obj*\\가 할당된 위치의 트레이스백을 가져옵니다. :class:`Traceback` 인스턴스를 반환하거나, "
":mod:`tracemalloc` 모듈이 메모리 할당을 추적하지 않고 있거나 객체 할당을 추적하지 않았으면 ``None``\\을 "
"반환합니다."

#: ../Doc/library/tracemalloc.rst:275
msgid "See also :func:`gc.get_referrers` and :func:`sys.getsizeof` functions."
msgstr ":func:`gc.get_referrers`\\와 :func:`sys.getsizeof` 함수도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:280
msgid "Get the maximum number of frames stored in the traceback of a trace."
msgstr "트레이스의 트레이스백에 저장된 최대 프레임 수를 가져옵니다."

#: ../Doc/library/tracemalloc.rst:282
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to get "
"the limit, otherwise an exception is raised."
msgstr "한계를 얻으려면 :mod:`tracemalloc` 모듈이 메모리 할당을 추적하고 있어야 합니다, 그렇지 않으면 예외가 발생합니다."

#: ../Doc/library/tracemalloc.rst:285
msgid "The limit is set by the :func:`start` function."
msgstr "한계는 :func:`start` 함수에 의해 설정됩니다."

#: ../Doc/library/tracemalloc.rst:290
msgid ""
"Get the current size and peak size of memory blocks traced by the "
":mod:`tracemalloc` module as a tuple: ``(current: int, peak: int)``."
msgstr ""
":mod:`tracemalloc` 모듈이 추적하는 메모리 블록의 현재 크기와 최대 크기를 튜플로 가져옵니다: ``(current: "
"int, peak: int)``."

#: ../Doc/library/tracemalloc.rst:296
msgid ""
"Get the memory usage in bytes of the :mod:`tracemalloc` module used to "
"store traces of memory blocks. Return an :class:`int`."
msgstr ""
"메모리 블록의 트레이스를 저장하는 데 사용된 :mod:`tracemalloc` 모듈의 메모리 사용량을 바이트 단위로 가져옵니다. "
":class:`int`\\를 반환합니다."

#: ../Doc/library/tracemalloc.rst:303
msgid ""
"``True`` if the :mod:`tracemalloc` module is tracing Python memory "
"allocations, ``False`` otherwise."
msgstr ":mod:`tracemalloc` 모듈이 파이썬 메모리 할당을 추적하고 있으면 ``True``, 그렇지 않으면 ``False``."

#: ../Doc/library/tracemalloc.rst:306
msgid "See also :func:`start` and :func:`stop` functions."
msgstr ":func:`start`\\와 :func:`stop` 함수도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:311
msgid ""
"Start tracing Python memory allocations: install hooks on Python memory "
"allocators. Collected tracebacks of traces will be limited to *nframe* "
"frames. By default, a trace of a memory block only stores the most recent"
" frame: the limit is ``1``. *nframe* must be greater or equal to ``1``."
msgstr ""
"파이썬 메모리 할당 추적을 시작합니다: 파이썬 메모리 할당자(allocator)에 훅을 설치합니다. 수집된 트레이스의 트레이스백은 "
"*nframe* 개의 프레임으로 제한됩니다. 기본적으로, 메모리 블록의 트레이스는 가장 최근의 프레임 만 저장합니다: 제한은 "
"``1``\\입니다. *nframe*\\은 ``1``\\보다 크거나 같아야 합니다."

#: ../Doc/library/tracemalloc.rst:316
msgid ""
"Storing more than ``1`` frame is only useful to compute statistics "
"grouped by ``'traceback'`` or to compute cumulative statistics: see the "
":meth:`Snapshot.compare_to` and :meth:`Snapshot.statistics` methods."
msgstr ""
"``1``\\개보다 더 많은 프레임을 저장하는 것은 ``'traceback'``\\으로 그룹화된 통계를 계산하거나 누적 통계를 "
"계산할 때만 유용합니다: :meth:`Snapshot.compare_to`\\와 :meth:`Snapshot.statistics` "
"메서드를 참조하십시오."

#: ../Doc/library/tracemalloc.rst:320
msgid ""
"Storing more frames increases the memory and CPU overhead of the "
":mod:`tracemalloc` module. Use the :func:`get_tracemalloc_memory` "
"function to measure how much memory is used by the :mod:`tracemalloc` "
"module."
msgstr ""
"더 많은 프레임을 저장하면 :mod:`tracemalloc` 모듈의 메모리와 CPU 오버헤드가 증가합니다. "
":func:`get_tracemalloc_memory` 함수를 사용하여 :mod:`tracemalloc` 모듈이 사용하는 메모리양을"
" 측정하십시오."

#: ../Doc/library/tracemalloc.rst:324
msgid ""
"The :envvar:`PYTHONTRACEMALLOC` environment variable "
"(``PYTHONTRACEMALLOC=NFRAME``) and the :option:`-X` "
"``tracemalloc=NFRAME`` command line option can be used to start tracing "
"at startup."
msgstr ""
":envvar:`PYTHONTRACEMALLOC` 환경 변수(``PYTHONTRACEMALLOC=NFRAME``)와 "
":option:`-X` ``tracemalloc=NFRAME`` 명령 줄 옵션을 사용하여 시작 시 추적을 시작할 수 있습니다."

#: ../Doc/library/tracemalloc.rst:328
msgid ""
"See also :func:`stop`, :func:`is_tracing` and :func:`get_traceback_limit`"
" functions."
msgstr ":func:`stop`, :func:`is_tracing` 및 :func:`get_traceback_limit` 함수도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:334
msgid ""
"Stop tracing Python memory allocations: uninstall hooks on Python memory "
"allocators. Also clears all previously collected traces of memory blocks "
"allocated by Python."
msgstr ""
"파이썬 메모리 할당 추적을 중지합니다: 파이썬 메모리 할당자에서 훅을 제거합니다. 또한 파이썬이 할당한 메모리 블록의 이전에 수집된"
" 모든 트레이스를 지웁니다."

#: ../Doc/library/tracemalloc.rst:338
msgid ""
"Call :func:`take_snapshot` function to take a snapshot of traces before "
"clearing them."
msgstr "트레이스를 지우기 전에 :func:`take_snapshot` 함수를 호출하여 트레이스의 스냅샷을 취하십시오."

#: ../Doc/library/tracemalloc.rst:341
msgid ""
"See also :func:`start`, :func:`is_tracing` and :func:`clear_traces` "
"functions."
msgstr ":func:`start`, :func:`is_tracing` 및 :func:`clear_traces` 함수도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:347
msgid ""
"Take a snapshot of traces of memory blocks allocated by Python. Return a "
"new :class:`Snapshot` instance."
msgstr "파이썬이 할당한 메모리 블록의 트레이스의 스냅샷을 취합니다. 새로운 :class:`Snapshot` 인스턴스를 반환합니다."

#: ../Doc/library/tracemalloc.rst:350
msgid ""
"The snapshot does not include memory blocks allocated before the "
":mod:`tracemalloc` module started to trace memory allocations."
msgstr ":mod:`tracemalloc` 모듈이 메모리 할당 추적을 시작하기 전에 할당된 메모리 블록은 스냅샷에 포함되지 않습니다."

#: ../Doc/library/tracemalloc.rst:353
msgid ""
"Tracebacks of traces are limited to :func:`get_traceback_limit` frames. "
"Use the *nframe* parameter of the :func:`start` function to store more "
"frames."
msgstr ""
"트레이스의 트레이스백은 :func:`get_traceback_limit` 개의 프레임으로 제한됩니다. 더 많은 프레임을 저장하려면 "
":func:`start` 함수의 *nframe* 매개 변수를 사용하십시오."

#: ../Doc/library/tracemalloc.rst:356
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to take "
"a snapshot, see the :func:`start` function."
msgstr ""
"스냅샷을 취하기 위해서는 :mod:`tracemalloc` 모듈이 메모리 할당을 추적하고 있어야 합니다, :func:`start` "
"함수를 참조하십시오."

#: ../Doc/library/tracemalloc.rst:359
msgid "See also the :func:`get_object_traceback` function."
msgstr ":func:`get_object_traceback` 함수도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:363
msgid "DomainFilter"
msgstr "DomainFilter"

#: ../Doc/library/tracemalloc.rst:367
msgid "Filter traces of memory blocks by their address space (domain)."
msgstr "주소 공간(도메인)별로 메모리 블록의 트레이스를 필터링합니다."

#: ../Doc/library/tracemalloc.rst:373
msgid ""
"If *inclusive* is ``True`` (include), match memory blocks allocated in "
"the address space :attr:`domain`."
msgstr ""
"*inclusive*\\가 ``True``\\이면 (포함), 주소 공간 :attr:`domain`\\에 할당된 메모리 블록을 "
"일치시킵니다."

#: ../Doc/library/tracemalloc.rst:376
msgid ""
"If *inclusive* is ``False`` (exclude), match memory blocks not allocated "
"in the address space :attr:`domain`."
msgstr ""
"*inclusive*\\가 ``False``\\이면 (제외), 주소 공간 :attr:`domain`\\에 할당되지 않은 메모리 "
"블록을 일치시킵니다."

#: ../Doc/library/tracemalloc.rst:381 ../Doc/library/tracemalloc.rst:633
msgid "Address space of a memory block (``int``). Read-only property."
msgstr "메모리 블록의 주소 공간 (``int``). 읽기 전용 프로퍼티."

#: ../Doc/library/tracemalloc.rst:385
msgid "Filter"
msgstr "Filter"

#: ../Doc/library/tracemalloc.rst:389
msgid "Filter on traces of memory blocks."
msgstr "메모리 블록의 트레이스를 필터링합니다."

#: ../Doc/library/tracemalloc.rst:391
msgid ""
"See the :func:`fnmatch.fnmatch` function for the syntax of "
"*filename_pattern*. The ``'.pyc'`` file extension is replaced with "
"``'.py'``."
msgstr ""
"*filename_pattern*\\의 문법은 :func:`fnmatch.fnmatch` 함수를 참조하십시오. ``'.pyc'`` "
"파일 확장자가 ``'.py'``\\로 대체됩니다."

#: ../Doc/library/tracemalloc.rst:395
msgid "Examples:"
msgstr "예:"

#: ../Doc/library/tracemalloc.rst:397
msgid ""
"``Filter(True, subprocess.__file__)`` only includes traces of the "
":mod:`subprocess` module"
msgstr "``Filter(True, subprocess.__file__)``\\은 :mod:`subprocess` 모듈의 트레이스만 포함합니다"

#: ../Doc/library/tracemalloc.rst:399
msgid ""
"``Filter(False, tracemalloc.__file__)`` excludes traces of the "
":mod:`tracemalloc` module"
msgstr ""
"``Filter(False, tracemalloc.__file__)``\\은 :mod:`tracemalloc` 모듈의 트레이스를 "
"제외합니다"

#: ../Doc/library/tracemalloc.rst:401
msgid "``Filter(False, \"<unknown>\")`` excludes empty tracebacks"
msgstr "``Filter(False, \"<unknown>\")``\\은 빈 트레이스백을 제외합니다"

#: ../Doc/library/tracemalloc.rst:404
msgid "The ``'.pyo'`` file extension is no longer replaced with ``'.py'``."
msgstr "``'.pyo'`` 파일 확장자는 더는 ``'.py'``\\로 대체되지 않습니다."

#: ../Doc/library/tracemalloc.rst:407 ../Doc/library/tracemalloc.rst:628
msgid "Added the :attr:`domain` attribute."
msgstr ":attr:`domain` 어트리뷰트를 추가했습니다."

#: ../Doc/library/tracemalloc.rst:413
msgid "Address space of a memory block (``int`` or ``None``)."
msgstr "메모리 블록의 주소 공간 (``int``\\나 ``None``)."

#: ../Doc/library/tracemalloc.rst:415 ../Doc/library/tracemalloc.rst:635
msgid ""
"tracemalloc uses the domain ``0`` to trace memory allocations made by "
"Python. C extensions can use other domains to trace other resources."
msgstr ""
"tracemalloc은 도메인 ``0``\\을 사용하여 파이썬의 메모리 할당을 추적합니다. C 확장은 다른 도메인을 사용하여 다른 "
"리소스를 추적 할 수 있습니다."

#: ../Doc/library/tracemalloc.rst:420
msgid ""
"If *inclusive* is ``True`` (include), only match memory blocks allocated "
"in a file with a name matching :attr:`filename_pattern` at line number "
":attr:`lineno`."
msgstr ""
"*inclusive*\\가 ``True``\\(포함)이면, 줄 번호 :attr:`lineno`\\에서 이름이 "
":attr:`filename_pattern`\\과 일치하는 파일에서 할당된 메모리 블록만 일치시킵니다."

#: ../Doc/library/tracemalloc.rst:424
msgid ""
"If *inclusive* is ``False`` (exclude), ignore memory blocks allocated in "
"a file with a name matching :attr:`filename_pattern` at line number "
":attr:`lineno`."
msgstr ""
"*inclusive*\\가 ``False``\\(제외)이면, 줄 번호 :attr:`lineno`\\에서 이름이 "
":attr:`filename_pattern`\\과 일치하는 파일에 할당된 메모리 블록을 무시합니다."

#: ../Doc/library/tracemalloc.rst:430
msgid ""
"Line number (``int``) of the filter. If *lineno* is ``None``, the filter "
"matches any line number."
msgstr "필터의 줄 번호 (``int``). *lineno*\\가 ``None``\\이면, 필터는 모든 줄 번호와 일치합니다."

#: ../Doc/library/tracemalloc.rst:435
msgid "Filename pattern of the filter (``str``). Read-only property."
msgstr "필터의 파일명 패턴 (``str``). 읽기 전용 프로퍼티."

#: ../Doc/library/tracemalloc.rst:439
msgid ""
"If *all_frames* is ``True``, all frames of the traceback are checked. If "
"*all_frames* is ``False``, only the most recent frame is checked."
msgstr ""
"*all_frames*\\가 ``True``\\이면, 트레이스백의 모든 프레임이 검사됩니다. *all_frames*\\가 "
"``False``\\이면, 가장 최근 프레임 만 검사됩니다."

#: ../Doc/library/tracemalloc.rst:442
msgid ""
"This attribute has no effect if the traceback limit is ``1``.  See the "
":func:`get_traceback_limit` function and :attr:`Snapshot.traceback_limit`"
" attribute."
msgstr ""
"트레이스백 한계가 ``1``\\이면 이 어트리뷰트가 적용되지 않습니다. :func:`get_traceback_limit` 함수와 "
":attr:`Snapshot.traceback_limit` 어트리뷰트를 참조하십시오."

#: ../Doc/library/tracemalloc.rst:448
msgid "Frame"
msgstr "Frame"

#: ../Doc/library/tracemalloc.rst:452
msgid "Frame of a traceback."
msgstr "트레이스백의 프레임."

#: ../Doc/library/tracemalloc.rst:454
msgid "The :class:`Traceback` class is a sequence of :class:`Frame` instances."
msgstr ":class:`Traceback` 클래스는 :class:`Frame` 인스턴스의 시퀀스입니다."

#: ../Doc/library/tracemalloc.rst:458
msgid "Filename (``str``)."
msgstr "파일명 (``str``)."

#: ../Doc/library/tracemalloc.rst:462
msgid "Line number (``int``)."
msgstr "줄 번호 (``int``)."

#: ../Doc/library/tracemalloc.rst:466
msgid "Snapshot"
msgstr "Snapshot"

#: ../Doc/library/tracemalloc.rst:470
msgid "Snapshot of traces of memory blocks allocated by Python."
msgstr "파이썬이 할당한 메모리 블록의 트레이스의 스냅샷."

#: ../Doc/library/tracemalloc.rst:472
msgid "The :func:`take_snapshot` function creates a snapshot instance."
msgstr ":func:`take_snapshot` 함수는 스냅샷 인스턴스를 만듭니다."

#: ../Doc/library/tracemalloc.rst:476
msgid ""
"Compute the differences with an old snapshot. Get statistics as a sorted "
"list of :class:`StatisticDiff` instances grouped by *key_type*."
msgstr ""
"이전 스냅샷과의 차이점을 계산합니다. *key_type* 별로 그룹화된 :class:`StatisticDiff` 인스턴스의 정렬된 "
"리스트로 통계를 가져옵니다."

#: ../Doc/library/tracemalloc.rst:479
msgid ""
"See the :meth:`Snapshot.statistics` method for *key_type* and "
"*cumulative* parameters."
msgstr ""
"*key_type*\\과 *cumulative* 매개 변수에 대해서는 :meth:`Snapshot.statistics` 메서드를 "
"참조하십시오."

#: ../Doc/library/tracemalloc.rst:482
msgid ""
"The result is sorted from the biggest to the smallest by: absolute value "
"of :attr:`StatisticDiff.size_diff`, :attr:`StatisticDiff.size`, absolute "
"value of :attr:`StatisticDiff.count_diff`, :attr:`Statistic.count` and "
"then by :attr:`StatisticDiff.traceback`."
msgstr ""
"결과는 다음 값에 따라 내림차순으로 정렬됩니다: :attr:`StatisticDiff.size_diff`\\의 절댓값, "
":attr:`StatisticDiff.size`, :attr:`StatisticDiff.count_diff`\\의 절댓값, "
":attr:`Statistic.count` 그런 다음 :attr:`StatisticDiff.traceback`."

#: ../Doc/library/tracemalloc.rst:490
msgid "Write the snapshot into a file."
msgstr "스냅샷을 파일에 씁니다."

#: ../Doc/library/tracemalloc.rst:492
msgid "Use :meth:`load` to reload the snapshot."
msgstr "스냅샷을 다시 로드하려면 :meth:`load`\\를 사용하십시오."

#: ../Doc/library/tracemalloc.rst:497
msgid ""
"Create a new :class:`Snapshot` instance with a filtered :attr:`traces` "
"sequence, *filters* is a list of :class:`DomainFilter` and "
":class:`Filter` instances.  If *filters* is an empty list, return a new "
":class:`Snapshot` instance with a copy of the traces."
msgstr ""
"필터링 된 :attr:`traces` 시퀀스로 새 :class:`Snapshot` 인스턴스를 만듭니다. *filters*\\는 "
":class:`DomainFilter`\\와 :class:`Filter` 인스턴스의 리스트입니다. *filters*\\가 빈 "
"리스트면, traces의 사본으로 새 :class:`Snapshot` 인스턴스를 반환합니다."

#: ../Doc/library/tracemalloc.rst:502
msgid ""
"All inclusive filters are applied at once, a trace is ignored if no "
"inclusive filters match it. A trace is ignored if at least one exclusive "
"filter matches it."
msgstr ""
"모든 포함 필터가 한 번에 적용되며, 아무런 포함 필터도 일치하지 않으면 트레이스는 무시됩니다. 하나 이상의 제외 필터가 일치하면 "
"트레이스는 무시됩니다."

#: ../Doc/library/tracemalloc.rst:506
msgid ":class:`DomainFilter` instances are now also accepted in *filters*."
msgstr ":class:`DomainFilter` 인스턴스도 이제 *filters*\\에서 허용됩니다."

#: ../Doc/library/tracemalloc.rst:512
msgid "Load a snapshot from a file."
msgstr "파일에서 스냅샷을 로드합니다."

#: ../Doc/library/tracemalloc.rst:514
msgid "See also :meth:`dump`."
msgstr ":meth:`dump`\\도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:519
msgid ""
"Get statistics as a sorted list of :class:`Statistic` instances grouped "
"by *key_type*:"
msgstr "*key_type* 별로 그룹화된 :class:`Statistic` 인스턴스의 정렬된 리스트로 통계를 가져옵니다:"

#: ../Doc/library/tracemalloc.rst:523
msgid "key_type"
msgstr "key_type"

#: ../Doc/library/tracemalloc.rst:523
msgid "description"
msgstr "설명"

#: ../Doc/library/tracemalloc.rst:525
msgid "``'filename'``"
msgstr "``'filename'``"

#: ../Doc/library/tracemalloc.rst:525
msgid "filename"
msgstr "파일명"

#: ../Doc/library/tracemalloc.rst:526
msgid "``'lineno'``"
msgstr "``'lineno'``"

#: ../Doc/library/tracemalloc.rst:526
msgid "filename and line number"
msgstr "파일명과 줄 번호"

#: ../Doc/library/tracemalloc.rst:527
msgid "``'traceback'``"
msgstr "``'traceback'``"

#: ../Doc/library/tracemalloc.rst:527
msgid "traceback"
msgstr "트레이스백"

#: ../Doc/library/tracemalloc.rst:530
msgid ""
"If *cumulative* is ``True``, cumulate size and count of memory blocks of "
"all frames of the traceback of a trace, not only the most recent frame. "
"The cumulative mode can only be used with *key_type* equals to "
"``'filename'`` and ``'lineno'``."
msgstr ""
"*cumulative*\\가 ``True``\\이면, 가장 최근의 프레임뿐만 아니라, 트레이스의 트레이스백의 모든 프레임에 대한 "
"메모리 블록의 크기와 개수를 누적합니다. 누적 모드는 *key_type*\\이 ``'filename'``\\과 "
"``'lineno'``\\와 같을 때만 사용할 수 있습니다."

#: ../Doc/library/tracemalloc.rst:535
msgid ""
"The result is sorted from the biggest to the smallest by: "
":attr:`Statistic.size`, :attr:`Statistic.count` and then by "
":attr:`Statistic.traceback`."
msgstr ""
"결과는 다음 값에 따라 내림차순으로 정렬됩니다: :attr:`Statistic.size`, "
":attr:`Statistic.count` 그런 다음 :attr:`Statistic.traceback`."

#: ../Doc/library/tracemalloc.rst:542
msgid ""
"Maximum number of frames stored in the traceback of :attr:`traces`: "
"result of the :func:`get_traceback_limit` when the snapshot was taken."
msgstr ""
":attr:`traces`\\의 트레이스백에 저장된 최대 프레임 수: 스냅샷을 취할 때 "
":func:`get_traceback_limit`\\의 결과."

#: ../Doc/library/tracemalloc.rst:547
msgid ""
"Traces of all memory blocks allocated by Python: sequence of "
":class:`Trace` instances."
msgstr "파이썬이 할당한 모든 메모리 블록의 트레이스: :class:`Trace` 인스턴스의 시퀀스."

#: ../Doc/library/tracemalloc.rst:550
msgid ""
"The sequence has an undefined order. Use the :meth:`Snapshot.statistics` "
"method to get a sorted list of statistics."
msgstr ""
"시퀀스의 순서는 정의되지 않았습니다. 정렬된 통계 리스트를 얻으려면 :meth:`Snapshot.statistics` 메서드를 "
"사용하십시오."

#: ../Doc/library/tracemalloc.rst:555
msgid "Statistic"
msgstr "Statistic"

#: ../Doc/library/tracemalloc.rst:559
msgid "Statistic on memory allocations."
msgstr "메모리 할당 통계."

#: ../Doc/library/tracemalloc.rst:561
msgid ""
":func:`Snapshot.statistics` returns a list of :class:`Statistic` "
"instances."
msgstr ":func:`Snapshot.statistics`\\는 :class:`Statistic` 인스턴스의 리스트를 반환합니다."

#: ../Doc/library/tracemalloc.rst:563
msgid "See also the :class:`StatisticDiff` class."
msgstr ":class:`StatisticDiff` 클래스도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:567
msgid "Number of memory blocks (``int``)."
msgstr "메모리 블록 수 (``int``)."

#: ../Doc/library/tracemalloc.rst:571
msgid "Total size of memory blocks in bytes (``int``)."
msgstr "총 메모리 블록의 바이트 단위 크기 (``int``)."

#: ../Doc/library/tracemalloc.rst:575 ../Doc/library/tracemalloc.rst:644
msgid ""
"Traceback where the memory block was allocated, :class:`Traceback` "
"instance."
msgstr "메모리 블록이 할당된 곳의 트레이스백, :class:`Traceback` 인스턴스."

#: ../Doc/library/tracemalloc.rst:580
msgid "StatisticDiff"
msgstr "StatisticDiff"

#: ../Doc/library/tracemalloc.rst:584
msgid ""
"Statistic difference on memory allocations between an old and a new "
":class:`Snapshot` instance."
msgstr "기존 :class:`Snapshot` 인스턴스와 새 인스턴스 간의 메모리 할당에 대한 통계적 차이."

#: ../Doc/library/tracemalloc.rst:587
msgid ""
":func:`Snapshot.compare_to` returns a list of :class:`StatisticDiff` "
"instances. See also the :class:`Statistic` class."
msgstr ""
":func:`Snapshot.compare_to`\\는 :class:`StatisticDiff` 인스턴스의 리스트를 반환합니다. "
":class:`Statistic` 클래스도 참조하십시오."

#: ../Doc/library/tracemalloc.rst:592
msgid ""
"Number of memory blocks in the new snapshot (``int``): ``0`` if the "
"memory blocks have been released in the new snapshot."
msgstr "새 스냅샷의 메모리 블록 수 (``int``): 새 스냅샷에서 메모리 블록이 해제되었으면 ``0``."

#: ../Doc/library/tracemalloc.rst:597
msgid ""
"Difference of number of memory blocks between the old and the new "
"snapshots (``int``): ``0`` if the memory blocks have been allocated in "
"the new snapshot."
msgstr "이전 스냅샷과 새 스냅샷 간의 메모리 블록 수의 차이 (``int``): 메모리 블록이 새 스냅샷에 할당되었으면 ``0``."

#: ../Doc/library/tracemalloc.rst:603
msgid ""
"Total size of memory blocks in bytes in the new snapshot (``int``): ``0``"
" if the memory blocks have been released in the new snapshot."
msgstr "새 스냅샷에서 총 메모리 블록의 바이트 단위 크기 (``int``): 새 스냅샷에서 메모리 블록이 해제되었으면 ``0``."

#: ../Doc/library/tracemalloc.rst:608
msgid ""
"Difference of total size of memory blocks in bytes between the old and "
"the new snapshots (``int``): ``0`` if the memory blocks have been "
"allocated in the new snapshot."
msgstr ""
"이전 스냅샷과 새 스냅샷 사이의 총 메모리 블록 크기의 바이트 단위 차이 (``int``): 메모리 블록이 새 스냅샷에 할당되었으면"
" ``0``."

#: ../Doc/library/tracemalloc.rst:614
msgid ""
"Traceback where the memory blocks were allocated, :class:`Traceback` "
"instance."
msgstr "메모리 블록이 할당된 곳의 트레이스백, :class:`Traceback` 인스턴스."

#: ../Doc/library/tracemalloc.rst:619
msgid "Trace"
msgstr "Trace"

#: ../Doc/library/tracemalloc.rst:623
msgid "Trace of a memory block."
msgstr "메모리 블록의 트레이스."

#: ../Doc/library/tracemalloc.rst:625
msgid ""
"The :attr:`Snapshot.traces` attribute is a sequence of :class:`Trace` "
"instances."
msgstr ":attr:`Snapshot.traces` 어트리뷰트는 :class:`Trace` 인스턴스의 시퀀스입니다."

#: ../Doc/library/tracemalloc.rst:640
msgid "Size of the memory block in bytes (``int``)."
msgstr "메모리 블록의 바이트 단위 크기 (``int``)."

#: ../Doc/library/tracemalloc.rst:649
msgid "Traceback"
msgstr "Traceback"

#: ../Doc/library/tracemalloc.rst:653
msgid ""
"Sequence of :class:`Frame` instances sorted from the oldest frame to the "
"most recent frame."
msgstr "가장 오래된 프레임에서 가장 최근 프레임 순으로 정렬된 :class:`Frame` 인스턴스의 시퀀스."

#: ../Doc/library/tracemalloc.rst:656
msgid ""
"A traceback contains at least ``1`` frame. If the ``tracemalloc`` module "
"failed to get a frame, the filename ``\"<unknown>\"`` at line number "
"``0`` is used."
msgstr ""
"트레이스백은 적어도 ``1``\\프레임을 포함합니다. ``tracemalloc`` 모듈이 프레임을 가져오지 못하면, 줄 번호 "
"``0``\\의 파일명 ``\"<unknown>\"``\\이 사용됩니다."

#: ../Doc/library/tracemalloc.rst:660
msgid ""
"When a snapshot is taken, tracebacks of traces are limited to "
":func:`get_traceback_limit` frames. See the :func:`take_snapshot` "
"function."
msgstr ""

#: ../Doc/library/tracemalloc.rst:663
msgid ""
"The :attr:`Trace.traceback` attribute is an instance of "
":class:`Traceback` instance."
msgstr ":attr:`Trace.traceback` 어트리뷰트는 :class:`Traceback` 인스턴스의 인스턴스입니다."

#: ../Doc/library/tracemalloc.rst:666
msgid ""
"Frames are now sorted from the oldest to the most recent, instead of most"
" recent to oldest."
msgstr "프레임은 이제 가장 최근에서 가장 오래된 것 대신, 가장 오래된 것에서 가장 최근으로 정렬됩니다."

#: ../Doc/library/tracemalloc.rst:671
msgid ""
"Format the traceback as a list of lines with newlines. Use the "
":mod:`linecache` module to retrieve lines from the source code. If "
"*limit* is set, format the *limit* most recent frames if *limit* is "
"positive. Otherwise, format the ``abs(limit)`` oldest frames. If "
"*most_recent_first* is ``True``, the order of the formatted frames is "
"reversed, returning the most recent frame first instead of last."
msgstr ""
"줄 바꿈이 있는 줄의 리스트로 트레이스백을 포맷합니다. 소스 코드에서 줄을 꺼내는데 :mod:`linecache` 모듈을 "
"사용합니다. *limit*\\가 설정되면, *limit*\\가 양수일 때 가장 최신 *limit* 개의 프레임을 포맷합니다. 그렇지"
" 않으면, 가장 오래된 ``abs(limit)`` 개의 프레임을 포맷합니다. *most_recent_first*\\가 "
"``True``\\이면, 포맷된 프레임의 순서가 반대로 되어, 가장 최근의 프레임을 마지막이 아니라 처음에 반환합니다."

#: ../Doc/library/tracemalloc.rst:678
msgid ""
"Similar to the :func:`traceback.format_tb` function, except that "
":meth:`.format` does not include newlines."
msgstr ""
":meth:`.format`\\에 줄 넘김 문자가 포함되지 않는다는 점을 제외하고, "
":func:`traceback.format_tb` 함수와 유사합니다."

#: ../Doc/library/tracemalloc.rst:681
msgid "Example::"
msgstr "예::"

#: ../Doc/library/tracemalloc.rst:687
msgid "Output::"
msgstr "출력::"

